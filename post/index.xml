<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://github.com/VincyDa/vincyda.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Aug 2021 19:33:43 +0800</lastBuildDate><atom:link href="https://github.com/VincyDa/vincyda.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog</title>
      <link>https://github.com/VincyDa/vincyda.github.io/post/blog/</link>
      <pubDate>Mon, 30 Aug 2021 19:33:43 +0800</pubDate>
      
      <guid>https://github.com/VincyDa/vincyda.github.io/post/blog/</guid>
      <description>使用pytest pytest这个库是一个第三方库，严格来说，它的设计思路不属于xUnit系列。但它使用起来比较方便，同时他又兼容unittest的用例：用unittest写的测试脚本可以用pytest来执行.
这种兼容性的设计，在测试执行器的设计思路层面上很普遍。举个例子，几乎所有测试执行器，都兼容junit的测试报告，他们都可以输出一种最初由junit提供的xml测试报告（有些测试执行器是原生自带这个功能，有些是用插件实现这个功能）。兼容现有工具，有利于新工具的推广，因此各种比较知名的测试执行器都会从设计上就考虑兼容性。
言归正传，接下来介绍测试执行器的几个重点功能，以及我们怎样用pytest里的这些功能。
任务1.安装pytest 和其他python库一样我们使用pip install pytest来安装pytest
任务2.打开官方文档 官方文档在这里，遇到问题时可以查阅http://docs.pytest.org/en/latest/
测试命名规范、 pytest里，测试用例的定义较unittest做了简化。
1.类名规范取消，不用继承任何类 上一节的例子中，我们使用unittest时，需要把测试写在类里，这个类还必须继承unittest.TestCase像这样：
class TestStringMethods(unittest.TestCase)：
只有继承了unittest Testcase这个类，unittest才能找到这个类里我们写的测试方法。
而pytest里，不再强制要求把测试写在类里，也不需要继承任何类。
取而代之的，是使用文件名规范来让pytest找到我们写的测试方法的文件。
2.文件名以test开头，注意带下划线 例1.test 1540.py，一个pytest的例子。注意文件名。
import test def inc(x): return x + 1 def test_answer(): assert ins(3)==5 if __name__==&#39;__main__&#39;: pytest.main() 我们一起来看一下这个例子：
首先第一行，导入pytest库
第2-3行，定义了一个inc方法，这个方法会把传入参数加1，再返回.
第4-5行，定义了一个test方法，这一点和unittest一样，测试方法名要以test开头
第6-7行，定义了程序的入口，这两行可以省略
断言 官方文档中告诉我们，pytest的断言里只要用assert就行了，不需要self.assertxxxxx。 pytest会显示这样的错误信息给我们，以下为例1的运行结果:
并且上一节中我们用过的自定义更详细的错误信息的方法在这里仍然适用.
setup和teardown 所谓setup和teardown，也是xUnit系列测试执行器中的概念。比如，假设我们有3个测试方法，都是操作在线购物网站的购物车的测试，他们有一个共同的前提条件，就是用户需要先登录。那么通常在xUnit系列的测试执行器中，测试本我们会这样写： 上图示意了一个带有setup和teardown操作的测试套件（test suite）的内部逻辑，这里的setup和teardown是对测试套件的，同样也可以定义对Case的和对测试方法的setup和teardown。
当执行一个测试套件时，其顺序是：
套件的steup===》case1的setup===》case1的测试方法====》case1的teardown====》
case2的setup====》case2测试方法====》case2的teardown ====》
case3的setup===》case3的测试方法====》case3的teardown ====》套件的teardown
在pytest，也支持上述的传统setup和teardown，感兴趣的同学可以看官方文档：https://docs.pytest.org/en/latest/xunit_setup.html#xunitestup
本文中，将介绍pytest的fixture以及用fixture实现的setup和teardown
Pytest的Fixture fixture是什么？
我们可以理解成fixture是提供给测试方法用的提前准备好的对象。 举个例子，我们做网页测试，需要先打开一个浏览器，后续所有操作都是在这个浏览器上做的.fixture能做的就是给我们的每个测试方法，都准备好一个浏览器对象.
同样，我们做一些测试时，需要先读取一个excel表格，然后所有测试方法，都需要用这个表格里的某些数据，那么fixture能做的就是给每个测试方法，都准备好一个已经读取完毕的excel表格对象。
我们一起来看一个官网的例子 例2.官网给的fixture例子
# content of conftest.</description>
    </item>
    
  </channel>
</rss>
